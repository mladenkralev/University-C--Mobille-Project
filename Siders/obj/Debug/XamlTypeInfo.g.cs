//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Siders
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Siders.Siders_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Siders.Siders_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Siders.Siders_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Siders.Siders_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[33];
            _typeNameTable[0] = "Siders.viewmodel.viewmodel.ViewModelExit";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "Siders.viewmodel.commands.ExitAppCommand";
            _typeNameTable[3] = "Siders.view.EndingMesseges";
            _typeNameTable[4] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[5] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[6] = "Siders.viewmodel.viewmodel.ViewModel";
            _typeNameTable[7] = "System.Collections.ObjectModel.ObservableCollection`1<Windows.UI.Xaml.Controls.Image>";
            _typeNameTable[8] = "System.Collections.ObjectModel.Collection`1<Windows.UI.Xaml.Controls.Image>";
            _typeNameTable[9] = "Windows.UI.Xaml.Controls.Image";
            _typeNameTable[10] = "Siders.model.Score";
            _typeNameTable[11] = "Windows.UI.Color";
            _typeNameTable[12] = "System.ValueType";
            _typeNameTable[13] = "Int32";
            _typeNameTable[14] = "Byte";
            _typeNameTable[15] = "Boolean";
            _typeNameTable[16] = "Siders.viewmodel.commands.LeftButtonCommand";
            _typeNameTable[17] = "Siders.viewmodel.RightButtonCommand";
            _typeNameTable[18] = "Double";
            _typeNameTable[19] = "Windows.UI.Xaml.Controls.Canvas";
            _typeNameTable[20] = "Windows.Foundation.Rect";
            _typeNameTable[21] = "String";
            _typeNameTable[22] = "System.Collections.ObjectModel.ObservableCollection`1<Siders.model.WallModel>";
            _typeNameTable[23] = "System.Collections.ObjectModel.Collection`1<Siders.model.WallModel>";
            _typeNameTable[24] = "Siders.model.WallModel";
            _typeNameTable[25] = "Siders.Game";
            _typeNameTable[26] = "Siders.viewmodel.viewmodel.ViewModelList";
            _typeNameTable[27] = "Siders.viewmodel.commands.GoBackCommand";
            _typeNameTable[28] = "Siders.view.ListPage";
            _typeNameTable[29] = "Siders.viewmodel.viewmodel.ViewModelLogin";
            _typeNameTable[30] = "Siders.viewmodel.commands.PlayCommand";
            _typeNameTable[31] = "Siders.viewmodel.commands.ListScoresCommand";
            _typeNameTable[32] = "Siders.view.Login";

            _typeTable = new global::System.Type[33];
            _typeTable[0] = typeof(global::Siders.viewmodel.viewmodel.ViewModelExit);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::Siders.viewmodel.commands.ExitAppCommand);
            _typeTable[3] = typeof(global::Siders.view.EndingMesseges);
            _typeTable[4] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[5] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[6] = typeof(global::Siders.viewmodel.viewmodel.ViewModel);
            _typeTable[7] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.Controls.Image>);
            _typeTable[8] = typeof(global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.Controls.Image>);
            _typeTable[9] = typeof(global::Windows.UI.Xaml.Controls.Image);
            _typeTable[10] = typeof(global::Siders.model.Score);
            _typeTable[11] = typeof(global::Windows.UI.Color);
            _typeTable[12] = typeof(global::System.ValueType);
            _typeTable[13] = typeof(global::System.Int32);
            _typeTable[14] = typeof(global::System.Byte);
            _typeTable[15] = typeof(global::System.Boolean);
            _typeTable[16] = typeof(global::Siders.viewmodel.commands.LeftButtonCommand);
            _typeTable[17] = typeof(global::Siders.viewmodel.RightButtonCommand);
            _typeTable[18] = typeof(global::System.Double);
            _typeTable[19] = typeof(global::Windows.UI.Xaml.Controls.Canvas);
            _typeTable[20] = typeof(global::Windows.Foundation.Rect);
            _typeTable[21] = typeof(global::System.String);
            _typeTable[22] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Siders.model.WallModel>);
            _typeTable[23] = typeof(global::System.Collections.ObjectModel.Collection<global::Siders.model.WallModel>);
            _typeTable[24] = typeof(global::Siders.model.WallModel);
            _typeTable[25] = typeof(global::Siders.Game);
            _typeTable[26] = typeof(global::Siders.viewmodel.viewmodel.ViewModelList);
            _typeTable[27] = typeof(global::Siders.viewmodel.commands.GoBackCommand);
            _typeTable[28] = typeof(global::Siders.view.ListPage);
            _typeTable[29] = typeof(global::Siders.viewmodel.viewmodel.ViewModelLogin);
            _typeTable[30] = typeof(global::Siders.viewmodel.commands.PlayCommand);
            _typeTable[31] = typeof(global::Siders.viewmodel.commands.ListScoresCommand);
            _typeTable[32] = typeof(global::Siders.view.Login);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ViewModelExit() { return new global::Siders.viewmodel.viewmodel.ViewModelExit(); }
        private object Activate_3_EndingMesseges() { return new global::Siders.view.EndingMesseges(); }
        private object Activate_6_ViewModel() { return new global::Siders.viewmodel.viewmodel.ViewModel(); }
        private object Activate_7_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.Controls.Image>(); }
        private object Activate_8_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.Controls.Image>(); }
        private object Activate_22_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Siders.model.WallModel>(); }
        private object Activate_23_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Siders.model.WallModel>(); }
        private object Activate_25_Game() { return new global::Siders.Game(); }
        private object Activate_26_ViewModelList() { return new global::Siders.viewmodel.viewmodel.ViewModelList(); }
        private object Activate_28_ListPage() { return new global::Siders.view.ListPage(); }
        private object Activate_29_ViewModelLogin() { return new global::Siders.viewmodel.viewmodel.ViewModelLogin(); }
        private object Activate_32_Login() { return new global::Siders.view.Login(); }
        private void VectorAdd_6_ViewModel(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.Image>)instance;
            var newItem = (global::Windows.UI.Xaml.Controls.Image)item;
            collection.Add(newItem);
        }
        private void VectorAdd_7_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.Image>)instance;
            var newItem = (global::Windows.UI.Xaml.Controls.Image)item;
            collection.Add(newItem);
        }
        private void VectorAdd_8_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Controls.Image>)instance;
            var newItem = (global::Windows.UI.Xaml.Controls.Image)item;
            collection.Add(newItem);
        }
        private void VectorAdd_22_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Siders.model.WallModel>)instance;
            var newItem = (global::Siders.model.WallModel)item;
            collection.Add(newItem);
        }
        private void VectorAdd_23_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Siders.model.WallModel>)instance;
            var newItem = (global::Siders.model.WallModel)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Siders.Siders_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Siders.Siders_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Siders.viewmodel.viewmodel.ViewModelExit
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_ViewModelExit;
                userType.AddMemberName("ExitAppCommand");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::Siders.Siders_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Siders.viewmodel.commands.ExitAppCommand
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  Siders.view.EndingMesseges
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_3_EndingMesseges;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Siders.Siders_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Siders.Siders_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Siders.viewmodel.viewmodel.ViewModel
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Windows.UI.Xaml.Controls.Image>"));
                userType.Activator = Activate_6_ViewModel;
                userType.CollectionAdd = VectorAdd_6_ViewModel;
                userType.AddMemberName("Score");
                userType.AddMemberName("ColorRight");
                userType.AddMemberName("ColorLeft");
                userType.AddMemberName("CounterOfSwaps");
                userType.AddMemberName("CounterOfTicksForReversingFromTopToRight");
                userType.AddMemberName("ToButtom");
                userType.AddMemberName("ToLeft");
                userType.AddMemberName("FromTopToButtom");
                userType.AddMemberName("HeightOfPoint");
                userType.AddMemberName("WidthOfPoint");
                userType.AddMemberName("LeftButtonCommand");
                userType.AddMemberName("RightButtonCommand");
                userType.AddMemberName("CanvasTopPoint");
                userType.AddMemberName("CanvasLeftPoint");
                userType.AddMemberName("CanvasTopButtom");
                userType.AddMemberName("RectanglePoint");
                userType.AddMemberName("Source");
                userType.AddMemberName("CollectionOfImages");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  System.Collections.ObjectModel.ObservableCollection`1<Windows.UI.Xaml.Controls.Image>
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Windows.UI.Xaml.Controls.Image>"));
                userType.Activator = Activate_7_ObservableCollection;
                userType.CollectionAdd = VectorAdd_7_ObservableCollection;
                xamlType = userType;
                break;

            case 8:   //  System.Collections.ObjectModel.Collection`1<Windows.UI.Xaml.Controls.Image>
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_Collection;
                userType.CollectionAdd = VectorAdd_8_Collection;
                userType.AddMemberName("Count");
                xamlType = userType;
                break;

            case 9:   //  Windows.UI.Xaml.Controls.Image
                xamlType = new global::Siders.Siders_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Siders.model.Score
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  Windows.UI.Color
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 12:   //  System.ValueType
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 13:   //  Int32
                xamlType = new global::Siders.Siders_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Byte
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 15:   //  Boolean
                xamlType = new global::Siders.Siders_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  Siders.viewmodel.commands.LeftButtonCommand
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  Siders.viewmodel.RightButtonCommand
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  Double
                xamlType = new global::Siders.Siders_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Windows.UI.Xaml.Controls.Canvas
                xamlType = new global::Siders.Siders_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Windows.Foundation.Rect
                xamlType = new global::Siders.Siders_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  String
                xamlType = new global::Siders.Siders_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  System.Collections.ObjectModel.ObservableCollection`1<Siders.model.WallModel>
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Siders.model.WallModel>"));
                userType.CollectionAdd = VectorAdd_22_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  System.Collections.ObjectModel.Collection`1<Siders.model.WallModel>
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_23_Collection;
                userType.CollectionAdd = VectorAdd_23_Collection;
                xamlType = userType;
                break;

            case 24:   //  Siders.model.WallModel
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("ID");
                userType.AddMemberName("Image");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Siders.Game
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_25_Game;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  Siders.viewmodel.viewmodel.ViewModelList
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_26_ViewModelList;
                userType.AddMemberName("GoBackCommand");
                userType.AddMemberName("ScoreString");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  Siders.viewmodel.commands.GoBackCommand
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  Siders.view.ListPage
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_28_ListPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  Siders.viewmodel.viewmodel.ViewModelLogin
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_29_ViewModelLogin;
                userType.AddMemberName("PlayCommand");
                userType.AddMemberName("ListScores");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  Siders.viewmodel.commands.PlayCommand
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Siders.viewmodel.commands.ListScoresCommand
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  Siders.view.Login
                userType = new global::Siders.Siders_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_Login;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_ViewModelExit_ExitAppCommand(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModelExit)instance;
            return that.ExitAppCommand;
        }
        private void set_0_ViewModelExit_ExitAppCommand(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModelExit)instance;
            that.ExitAppCommand = (global::Siders.viewmodel.commands.ExitAppCommand)Value;
        }
        private object get_1_ViewModel_Score(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            return that.Score;
        }
        private void set_1_ViewModel_Score(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            that.Score = (global::Siders.model.Score)Value;
        }
        private object get_2_ViewModel_ColorRight(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            return that.ColorRight;
        }
        private void set_2_ViewModel_ColorRight(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            that.ColorRight = (global::Windows.UI.Color)Value;
        }
        private object get_3_ViewModel_ColorLeft(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            return that.ColorLeft;
        }
        private void set_3_ViewModel_ColorLeft(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            that.ColorLeft = (global::Windows.UI.Color)Value;
        }
        private object get_4_ViewModel_CounterOfSwaps(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            return that.CounterOfSwaps;
        }
        private void set_4_ViewModel_CounterOfSwaps(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            that.CounterOfSwaps = (global::System.Int32)Value;
        }
        private object get_5_ViewModel_CounterOfTicksForReversingFromTopToRight(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            return that.CounterOfTicksForReversingFromTopToRight;
        }
        private void set_5_ViewModel_CounterOfTicksForReversingFromTopToRight(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            that.CounterOfTicksForReversingFromTopToRight = (global::System.Byte)Value;
        }
        private object get_6_ViewModel_ToButtom(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            return that.ToButtom;
        }
        private void set_6_ViewModel_ToButtom(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            that.ToButtom = (global::System.Boolean)Value;
        }
        private object get_7_ViewModel_ToLeft(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            return that.ToLeft;
        }
        private void set_7_ViewModel_ToLeft(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            that.ToLeft = (global::System.Boolean)Value;
        }
        private object get_8_ViewModel_FromTopToButtom(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            return that.FromTopToButtom;
        }
        private void set_8_ViewModel_FromTopToButtom(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            that.FromTopToButtom = (global::System.Boolean)Value;
        }
        private object get_9_ViewModel_HeightOfPoint(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            return that.HeightOfPoint;
        }
        private void set_9_ViewModel_HeightOfPoint(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            that.HeightOfPoint = (global::System.Int32)Value;
        }
        private object get_10_ViewModel_WidthOfPoint(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            return that.WidthOfPoint;
        }
        private void set_10_ViewModel_WidthOfPoint(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            that.WidthOfPoint = (global::System.Int32)Value;
        }
        private object get_11_ViewModel_LeftButtonCommand(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            return that.LeftButtonCommand;
        }
        private void set_11_ViewModel_LeftButtonCommand(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            that.LeftButtonCommand = (global::Siders.viewmodel.commands.LeftButtonCommand)Value;
        }
        private object get_12_ViewModel_RightButtonCommand(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            return that.RightButtonCommand;
        }
        private void set_12_ViewModel_RightButtonCommand(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            that.RightButtonCommand = (global::Siders.viewmodel.RightButtonCommand)Value;
        }
        private object get_13_ViewModel_CanvasTopPoint(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            return that.CanvasTopPoint;
        }
        private void set_13_ViewModel_CanvasTopPoint(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            that.CanvasTopPoint = (global::System.Double)Value;
        }
        private object get_14_ViewModel_CanvasLeftPoint(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            return that.CanvasLeftPoint;
        }
        private void set_14_ViewModel_CanvasLeftPoint(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            that.CanvasLeftPoint = (global::System.Double)Value;
        }
        private object get_15_ViewModel_CanvasTopButtom(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            return that.CanvasTopButtom;
        }
        private void set_15_ViewModel_CanvasTopButtom(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            that.CanvasTopButtom = (global::Windows.UI.Xaml.Controls.Canvas)Value;
        }
        private object get_16_ViewModel_RectanglePoint(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            return that.RectanglePoint;
        }
        private void set_16_ViewModel_RectanglePoint(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            that.RectanglePoint = (global::Windows.Foundation.Rect)Value;
        }
        private object get_17_ViewModel_Source(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            return that.Source;
        }
        private void set_17_ViewModel_Source(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            that.Source = (global::System.String)Value;
        }
        private object get_18_ViewModel_CollectionOfImages(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            return that.CollectionOfImages;
        }
        private void set_18_ViewModel_CollectionOfImages(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModel)instance;
            that.CollectionOfImages = (global::System.Collections.ObjectModel.ObservableCollection<global::Siders.model.WallModel>)Value;
        }
        private object get_19_WallModel_ID(object instance)
        {
            var that = (global::Siders.model.WallModel)instance;
            return that.ID;
        }
        private void set_19_WallModel_ID(object instance, object Value)
        {
            var that = (global::Siders.model.WallModel)instance;
            that.ID = (global::System.Int32)Value;
        }
        private object get_20_WallModel_Image(object instance)
        {
            var that = (global::Siders.model.WallModel)instance;
            return that.Image;
        }
        private void set_20_WallModel_Image(object instance, object Value)
        {
            var that = (global::Siders.model.WallModel)instance;
            that.Image = (global::Windows.UI.Xaml.Controls.Image)Value;
        }
        private object get_21_Collection_Count(object instance)
        {
            var that = (global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.Controls.Image>)instance;
            return that.Count;
        }
        private object get_22_ViewModelList_GoBackCommand(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModelList)instance;
            return that.GoBackCommand;
        }
        private void set_22_ViewModelList_GoBackCommand(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModelList)instance;
            that.GoBackCommand = (global::Siders.viewmodel.commands.GoBackCommand)Value;
        }
        private object get_23_ViewModelList_ScoreString(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModelList)instance;
            return that.ScoreString;
        }
        private void set_23_ViewModelList_ScoreString(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModelList)instance;
            that.ScoreString = (global::System.String)Value;
        }
        private object get_24_ViewModelLogin_PlayCommand(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModelLogin)instance;
            return that.PlayCommand;
        }
        private void set_24_ViewModelLogin_PlayCommand(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModelLogin)instance;
            that.PlayCommand = (global::Siders.viewmodel.commands.PlayCommand)Value;
        }
        private object get_25_ViewModelLogin_ListScores(object instance)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModelLogin)instance;
            return that.ListScores;
        }
        private void set_25_ViewModelLogin_ListScores(object instance, object Value)
        {
            var that = (global::Siders.viewmodel.viewmodel.ViewModelLogin)instance;
            that.ListScores = (global::Siders.viewmodel.commands.ListScoresCommand)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Siders.Siders_XamlTypeInfo.XamlMember xamlMember = null;
            global::Siders.Siders_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Siders.viewmodel.viewmodel.ViewModelExit.ExitAppCommand":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModelExit");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "ExitAppCommand", "Siders.viewmodel.commands.ExitAppCommand");
                xamlMember.Getter = get_0_ViewModelExit_ExitAppCommand;
                xamlMember.Setter = set_0_ViewModelExit_ExitAppCommand;
                break;
            case "Siders.viewmodel.viewmodel.ViewModel.Score":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "Score", "Siders.model.Score");
                xamlMember.Getter = get_1_ViewModel_Score;
                xamlMember.Setter = set_1_ViewModel_Score;
                break;
            case "Siders.viewmodel.viewmodel.ViewModel.ColorRight":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "ColorRight", "Windows.UI.Color");
                xamlMember.Getter = get_2_ViewModel_ColorRight;
                xamlMember.Setter = set_2_ViewModel_ColorRight;
                break;
            case "Siders.viewmodel.viewmodel.ViewModel.ColorLeft":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "ColorLeft", "Windows.UI.Color");
                xamlMember.Getter = get_3_ViewModel_ColorLeft;
                xamlMember.Setter = set_3_ViewModel_ColorLeft;
                break;
            case "Siders.viewmodel.viewmodel.ViewModel.CounterOfSwaps":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "CounterOfSwaps", "Int32");
                xamlMember.Getter = get_4_ViewModel_CounterOfSwaps;
                xamlMember.Setter = set_4_ViewModel_CounterOfSwaps;
                break;
            case "Siders.viewmodel.viewmodel.ViewModel.CounterOfTicksForReversingFromTopToRight":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "CounterOfTicksForReversingFromTopToRight", "Byte");
                xamlMember.Getter = get_5_ViewModel_CounterOfTicksForReversingFromTopToRight;
                xamlMember.Setter = set_5_ViewModel_CounterOfTicksForReversingFromTopToRight;
                break;
            case "Siders.viewmodel.viewmodel.ViewModel.ToButtom":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "ToButtom", "Boolean");
                xamlMember.Getter = get_6_ViewModel_ToButtom;
                xamlMember.Setter = set_6_ViewModel_ToButtom;
                break;
            case "Siders.viewmodel.viewmodel.ViewModel.ToLeft":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "ToLeft", "Boolean");
                xamlMember.Getter = get_7_ViewModel_ToLeft;
                xamlMember.Setter = set_7_ViewModel_ToLeft;
                break;
            case "Siders.viewmodel.viewmodel.ViewModel.FromTopToButtom":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "FromTopToButtom", "Boolean");
                xamlMember.Getter = get_8_ViewModel_FromTopToButtom;
                xamlMember.Setter = set_8_ViewModel_FromTopToButtom;
                break;
            case "Siders.viewmodel.viewmodel.ViewModel.HeightOfPoint":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "HeightOfPoint", "Int32");
                xamlMember.Getter = get_9_ViewModel_HeightOfPoint;
                xamlMember.Setter = set_9_ViewModel_HeightOfPoint;
                break;
            case "Siders.viewmodel.viewmodel.ViewModel.WidthOfPoint":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "WidthOfPoint", "Int32");
                xamlMember.Getter = get_10_ViewModel_WidthOfPoint;
                xamlMember.Setter = set_10_ViewModel_WidthOfPoint;
                break;
            case "Siders.viewmodel.viewmodel.ViewModel.LeftButtonCommand":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "LeftButtonCommand", "Siders.viewmodel.commands.LeftButtonCommand");
                xamlMember.Getter = get_11_ViewModel_LeftButtonCommand;
                xamlMember.Setter = set_11_ViewModel_LeftButtonCommand;
                break;
            case "Siders.viewmodel.viewmodel.ViewModel.RightButtonCommand":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "RightButtonCommand", "Siders.viewmodel.RightButtonCommand");
                xamlMember.Getter = get_12_ViewModel_RightButtonCommand;
                xamlMember.Setter = set_12_ViewModel_RightButtonCommand;
                break;
            case "Siders.viewmodel.viewmodel.ViewModel.CanvasTopPoint":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "CanvasTopPoint", "Double");
                xamlMember.Getter = get_13_ViewModel_CanvasTopPoint;
                xamlMember.Setter = set_13_ViewModel_CanvasTopPoint;
                break;
            case "Siders.viewmodel.viewmodel.ViewModel.CanvasLeftPoint":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "CanvasLeftPoint", "Double");
                xamlMember.Getter = get_14_ViewModel_CanvasLeftPoint;
                xamlMember.Setter = set_14_ViewModel_CanvasLeftPoint;
                break;
            case "Siders.viewmodel.viewmodel.ViewModel.CanvasTopButtom":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "CanvasTopButtom", "Windows.UI.Xaml.Controls.Canvas");
                xamlMember.Getter = get_15_ViewModel_CanvasTopButtom;
                xamlMember.Setter = set_15_ViewModel_CanvasTopButtom;
                break;
            case "Siders.viewmodel.viewmodel.ViewModel.RectanglePoint":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "RectanglePoint", "Windows.Foundation.Rect");
                xamlMember.Getter = get_16_ViewModel_RectanglePoint;
                xamlMember.Setter = set_16_ViewModel_RectanglePoint;
                break;
            case "Siders.viewmodel.viewmodel.ViewModel.Source":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "Source", "String");
                xamlMember.Getter = get_17_ViewModel_Source;
                xamlMember.Setter = set_17_ViewModel_Source;
                break;
            case "Siders.viewmodel.viewmodel.ViewModel.CollectionOfImages":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "CollectionOfImages", "System.Collections.ObjectModel.ObservableCollection`1<Siders.model.WallModel>");
                xamlMember.Getter = get_18_ViewModel_CollectionOfImages;
                xamlMember.Setter = set_18_ViewModel_CollectionOfImages;
                break;
            case "Siders.model.WallModel.ID":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.model.WallModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "ID", "Int32");
                xamlMember.Getter = get_19_WallModel_ID;
                xamlMember.Setter = set_19_WallModel_ID;
                break;
            case "Siders.model.WallModel.Image":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.model.WallModel");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "Image", "Windows.UI.Xaml.Controls.Image");
                xamlMember.Getter = get_20_WallModel_Image;
                xamlMember.Setter = set_20_WallModel_Image;
                break;
            case "System.Collections.ObjectModel.Collection`1<Windows.UI.Xaml.Controls.Image>.Count":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Windows.UI.Xaml.Controls.Image>");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "Count", "Int32");
                xamlMember.Getter = get_21_Collection_Count;
                xamlMember.SetIsReadOnly();
                break;
            case "Siders.viewmodel.viewmodel.ViewModelList.GoBackCommand":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModelList");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "GoBackCommand", "Siders.viewmodel.commands.GoBackCommand");
                xamlMember.Getter = get_22_ViewModelList_GoBackCommand;
                xamlMember.Setter = set_22_ViewModelList_GoBackCommand;
                break;
            case "Siders.viewmodel.viewmodel.ViewModelList.ScoreString":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModelList");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "ScoreString", "String");
                xamlMember.Getter = get_23_ViewModelList_ScoreString;
                xamlMember.Setter = set_23_ViewModelList_ScoreString;
                break;
            case "Siders.viewmodel.viewmodel.ViewModelLogin.PlayCommand":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModelLogin");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "PlayCommand", "Siders.viewmodel.commands.PlayCommand");
                xamlMember.Getter = get_24_ViewModelLogin_PlayCommand;
                xamlMember.Setter = set_24_ViewModelLogin_PlayCommand;
                break;
            case "Siders.viewmodel.viewmodel.ViewModelLogin.ListScores":
                userType = (global::Siders.Siders_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Siders.viewmodel.viewmodel.ViewModelLogin");
                xamlMember = new global::Siders.Siders_XamlTypeInfo.XamlMember(this, "ListScores", "Siders.viewmodel.commands.ListScoresCommand");
                xamlMember.Getter = get_25_ViewModelLogin_ListScores;
                xamlMember.Setter = set_25_ViewModelLogin_ListScores;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Siders.Siders_XamlTypeInfo.XamlSystemBaseType
    {
        global::Siders.Siders_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Siders.Siders_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Siders.Siders_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Siders.Siders_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}



